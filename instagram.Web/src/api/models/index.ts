/* tslint:disable */
/* eslint-disable */
// Generated by Microsoft Kiota
// @ts-ignore
import { type AdditionalDataHolder, type ApiError, type Parsable, type ParseNode, type SerializationWriter } from '@microsoft/kiota-abstractions';

export interface AccessTokenResponse extends AdditionalDataHolder, Parsable {
    /**
     * The accessToken property
     */
    accessToken?: string | null;
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * The expiresIn property
     */
    expiresIn?: number | null;
    /**
     * The refreshToken property
     */
    refreshToken?: string | null;
    /**
     * The tokenType property
     */
    tokenType?: string | null;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {AccessTokenResponse}
 */
// @ts-ignore
export function createAccessTokenResponseFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoAccessTokenResponse;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {ForgotPasswordRequest}
 */
// @ts-ignore
export function createForgotPasswordRequestFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoForgotPasswordRequest;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {HttpValidationProblemDetails_errors}
 */
// @ts-ignore
export function createHttpValidationProblemDetails_errorsFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoHttpValidationProblemDetails_errors;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {HttpValidationProblemDetails}
 */
// @ts-ignore
export function createHttpValidationProblemDetailsFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoHttpValidationProblemDetails;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {InfoRequest}
 */
// @ts-ignore
export function createInfoRequestFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoInfoRequest;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {InfoResponse}
 */
// @ts-ignore
export function createInfoResponseFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoInfoResponse;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {LoginRequest}
 */
// @ts-ignore
export function createLoginRequestFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoLoginRequest;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {RefreshRequest}
 */
// @ts-ignore
export function createRefreshRequestFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoRefreshRequest;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {RegisterRequest}
 */
// @ts-ignore
export function createRegisterRequestFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoRegisterRequest;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {ResendConfirmationEmailRequest}
 */
// @ts-ignore
export function createResendConfirmationEmailRequestFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoResendConfirmationEmailRequest;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {ResetPasswordRequest}
 */
// @ts-ignore
export function createResetPasswordRequestFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoResetPasswordRequest;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {TwoFactorRequest}
 */
// @ts-ignore
export function createTwoFactorRequestFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoTwoFactorRequest;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {TwoFactorResponse}
 */
// @ts-ignore
export function createTwoFactorResponseFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoTwoFactorResponse;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {UserDto}
 */
// @ts-ignore
export function createUserDtoFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoUserDto;
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoAccessTokenResponse(accessTokenResponse: Partial<AccessTokenResponse> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "accessToken": n => { accessTokenResponse.accessToken = n.getStringValue(); },
        "expiresIn": n => { accessTokenResponse.expiresIn = n.getNumberValue(); },
        "refreshToken": n => { accessTokenResponse.refreshToken = n.getStringValue(); },
        "tokenType": n => { accessTokenResponse.tokenType = n.getStringValue(); },
    }
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoForgotPasswordRequest(forgotPasswordRequest: Partial<ForgotPasswordRequest> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "email": n => { forgotPasswordRequest.email = n.getStringValue(); },
    }
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoHttpValidationProblemDetails(httpValidationProblemDetails: Partial<HttpValidationProblemDetails> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "detail": n => { httpValidationProblemDetails.detail = n.getStringValue(); },
        "errors": n => { httpValidationProblemDetails.errors = n.getObjectValue<HttpValidationProblemDetails_errors>(createHttpValidationProblemDetails_errorsFromDiscriminatorValue); },
        "instance": n => { httpValidationProblemDetails.instance = n.getStringValue(); },
        "status": n => { httpValidationProblemDetails.status = n.getNumberValue(); },
        "title": n => { httpValidationProblemDetails.title = n.getStringValue(); },
        "type": n => { httpValidationProblemDetails.type = n.getStringValue(); },
    }
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoHttpValidationProblemDetails_errors(httpValidationProblemDetails_errors: Partial<HttpValidationProblemDetails_errors> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
    }
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoInfoRequest(infoRequest: Partial<InfoRequest> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "newEmail": n => { infoRequest.newEmail = n.getStringValue(); },
        "newPassword": n => { infoRequest.newPassword = n.getStringValue(); },
        "oldPassword": n => { infoRequest.oldPassword = n.getStringValue(); },
    }
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoInfoResponse(infoResponse: Partial<InfoResponse> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "email": n => { infoResponse.email = n.getStringValue(); },
        "isEmailConfirmed": n => { infoResponse.isEmailConfirmed = n.getBooleanValue(); },
    }
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoLoginRequest(loginRequest: Partial<LoginRequest> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "email": n => { loginRequest.email = n.getStringValue(); },
        "password": n => { loginRequest.password = n.getStringValue(); },
        "twoFactorCode": n => { loginRequest.twoFactorCode = n.getStringValue(); },
        "twoFactorRecoveryCode": n => { loginRequest.twoFactorRecoveryCode = n.getStringValue(); },
    }
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoRefreshRequest(refreshRequest: Partial<RefreshRequest> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "refreshToken": n => { refreshRequest.refreshToken = n.getStringValue(); },
    }
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoRegisterRequest(registerRequest: Partial<RegisterRequest> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "email": n => { registerRequest.email = n.getStringValue(); },
        "password": n => { registerRequest.password = n.getStringValue(); },
    }
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoResendConfirmationEmailRequest(resendConfirmationEmailRequest: Partial<ResendConfirmationEmailRequest> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "email": n => { resendConfirmationEmailRequest.email = n.getStringValue(); },
    }
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoResetPasswordRequest(resetPasswordRequest: Partial<ResetPasswordRequest> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "email": n => { resetPasswordRequest.email = n.getStringValue(); },
        "newPassword": n => { resetPasswordRequest.newPassword = n.getStringValue(); },
        "resetCode": n => { resetPasswordRequest.resetCode = n.getStringValue(); },
    }
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoTwoFactorRequest(twoFactorRequest: Partial<TwoFactorRequest> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "enable": n => { twoFactorRequest.enable = n.getBooleanValue(); },
        "forgetMachine": n => { twoFactorRequest.forgetMachine = n.getBooleanValue(); },
        "resetRecoveryCodes": n => { twoFactorRequest.resetRecoveryCodes = n.getBooleanValue(); },
        "resetSharedKey": n => { twoFactorRequest.resetSharedKey = n.getBooleanValue(); },
        "twoFactorCode": n => { twoFactorRequest.twoFactorCode = n.getStringValue(); },
    }
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoTwoFactorResponse(twoFactorResponse: Partial<TwoFactorResponse> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "isMachineRemembered": n => { twoFactorResponse.isMachineRemembered = n.getBooleanValue(); },
        "isTwoFactorEnabled": n => { twoFactorResponse.isTwoFactorEnabled = n.getBooleanValue(); },
        "recoveryCodes": n => { twoFactorResponse.recoveryCodes = n.getCollectionOfPrimitiveValues<string>(); },
        "recoveryCodesLeft": n => { twoFactorResponse.recoveryCodesLeft = n.getNumberValue(); },
        "sharedKey": n => { twoFactorResponse.sharedKey = n.getStringValue(); },
    }
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoUserDto(userDto: Partial<UserDto> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "bio": n => { userDto.bio = n.getStringValue(); },
        "userId": n => { userDto.userId = n.getStringValue(); },
        "userName": n => { userDto.userName = n.getStringValue(); },
    }
}
export interface ForgotPasswordRequest extends AdditionalDataHolder, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * The email property
     */
    email?: string | null;
}
export interface HttpValidationProblemDetails extends AdditionalDataHolder, ApiError, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * The detail property
     */
    detail?: string | null;
    /**
     * The errors property
     */
    errors?: HttpValidationProblemDetails_errors | null;
    /**
     * The instance property
     */
    instance?: string | null;
    /**
     * The status property
     */
    status?: number | null;
    /**
     * The title property
     */
    title?: string | null;
    /**
     * The type property
     */
    type?: string | null;
}
export interface HttpValidationProblemDetails_errors extends AdditionalDataHolder, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
}
export interface InfoRequest extends AdditionalDataHolder, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * The newEmail property
     */
    newEmail?: string | null;
    /**
     * The newPassword property
     */
    newPassword?: string | null;
    /**
     * The oldPassword property
     */
    oldPassword?: string | null;
}
export interface InfoResponse extends AdditionalDataHolder, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * The email property
     */
    email?: string | null;
    /**
     * The isEmailConfirmed property
     */
    isEmailConfirmed?: boolean | null;
}
export interface LoginRequest extends AdditionalDataHolder, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * The email property
     */
    email?: string | null;
    /**
     * The password property
     */
    password?: string | null;
    /**
     * The twoFactorCode property
     */
    twoFactorCode?: string | null;
    /**
     * The twoFactorRecoveryCode property
     */
    twoFactorRecoveryCode?: string | null;
}
export interface RefreshRequest extends AdditionalDataHolder, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * The refreshToken property
     */
    refreshToken?: string | null;
}
export interface RegisterRequest extends AdditionalDataHolder, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * The email property
     */
    email?: string | null;
    /**
     * The password property
     */
    password?: string | null;
}
export interface ResendConfirmationEmailRequest extends AdditionalDataHolder, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * The email property
     */
    email?: string | null;
}
export interface ResetPasswordRequest extends AdditionalDataHolder, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * The email property
     */
    email?: string | null;
    /**
     * The newPassword property
     */
    newPassword?: string | null;
    /**
     * The resetCode property
     */
    resetCode?: string | null;
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeAccessTokenResponse(writer: SerializationWriter, accessTokenResponse: Partial<AccessTokenResponse> | undefined | null = {}) : void {
    if (accessTokenResponse) {
        writer.writeStringValue("accessToken", accessTokenResponse.accessToken);
        writer.writeNumberValue("expiresIn", accessTokenResponse.expiresIn);
        writer.writeStringValue("refreshToken", accessTokenResponse.refreshToken);
        writer.writeStringValue("tokenType", accessTokenResponse.tokenType);
        writer.writeAdditionalData(accessTokenResponse.additionalData);
    }
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeForgotPasswordRequest(writer: SerializationWriter, forgotPasswordRequest: Partial<ForgotPasswordRequest> | undefined | null = {}) : void {
    if (forgotPasswordRequest) {
        writer.writeStringValue("email", forgotPasswordRequest.email);
        writer.writeAdditionalData(forgotPasswordRequest.additionalData);
    }
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeHttpValidationProblemDetails(writer: SerializationWriter, httpValidationProblemDetails: Partial<HttpValidationProblemDetails> | undefined | null = {}) : void {
    if (httpValidationProblemDetails) {
        writer.writeStringValue("detail", httpValidationProblemDetails.detail);
        writer.writeObjectValue<HttpValidationProblemDetails_errors>("errors", httpValidationProblemDetails.errors, serializeHttpValidationProblemDetails_errors);
        writer.writeStringValue("instance", httpValidationProblemDetails.instance);
        writer.writeNumberValue("status", httpValidationProblemDetails.status);
        writer.writeStringValue("title", httpValidationProblemDetails.title);
        writer.writeStringValue("type", httpValidationProblemDetails.type);
        writer.writeAdditionalData(httpValidationProblemDetails.additionalData);
    }
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeHttpValidationProblemDetails_errors(writer: SerializationWriter, httpValidationProblemDetails_errors: Partial<HttpValidationProblemDetails_errors> | undefined | null = {}) : void {
    if (httpValidationProblemDetails_errors) {
        writer.writeAdditionalData(httpValidationProblemDetails_errors.additionalData);
    }
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeInfoRequest(writer: SerializationWriter, infoRequest: Partial<InfoRequest> | undefined | null = {}) : void {
    if (infoRequest) {
        writer.writeStringValue("newEmail", infoRequest.newEmail);
        writer.writeStringValue("newPassword", infoRequest.newPassword);
        writer.writeStringValue("oldPassword", infoRequest.oldPassword);
        writer.writeAdditionalData(infoRequest.additionalData);
    }
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeInfoResponse(writer: SerializationWriter, infoResponse: Partial<InfoResponse> | undefined | null = {}) : void {
    if (infoResponse) {
        writer.writeStringValue("email", infoResponse.email);
        writer.writeBooleanValue("isEmailConfirmed", infoResponse.isEmailConfirmed);
        writer.writeAdditionalData(infoResponse.additionalData);
    }
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeLoginRequest(writer: SerializationWriter, loginRequest: Partial<LoginRequest> | undefined | null = {}) : void {
    if (loginRequest) {
        writer.writeStringValue("email", loginRequest.email);
        writer.writeStringValue("password", loginRequest.password);
        writer.writeStringValue("twoFactorCode", loginRequest.twoFactorCode);
        writer.writeStringValue("twoFactorRecoveryCode", loginRequest.twoFactorRecoveryCode);
        writer.writeAdditionalData(loginRequest.additionalData);
    }
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeRefreshRequest(writer: SerializationWriter, refreshRequest: Partial<RefreshRequest> | undefined | null = {}) : void {
    if (refreshRequest) {
        writer.writeStringValue("refreshToken", refreshRequest.refreshToken);
        writer.writeAdditionalData(refreshRequest.additionalData);
    }
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeRegisterRequest(writer: SerializationWriter, registerRequest: Partial<RegisterRequest> | undefined | null = {}) : void {
    if (registerRequest) {
        writer.writeStringValue("email", registerRequest.email);
        writer.writeStringValue("password", registerRequest.password);
        writer.writeAdditionalData(registerRequest.additionalData);
    }
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeResendConfirmationEmailRequest(writer: SerializationWriter, resendConfirmationEmailRequest: Partial<ResendConfirmationEmailRequest> | undefined | null = {}) : void {
    if (resendConfirmationEmailRequest) {
        writer.writeStringValue("email", resendConfirmationEmailRequest.email);
        writer.writeAdditionalData(resendConfirmationEmailRequest.additionalData);
    }
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeResetPasswordRequest(writer: SerializationWriter, resetPasswordRequest: Partial<ResetPasswordRequest> | undefined | null = {}) : void {
    if (resetPasswordRequest) {
        writer.writeStringValue("email", resetPasswordRequest.email);
        writer.writeStringValue("newPassword", resetPasswordRequest.newPassword);
        writer.writeStringValue("resetCode", resetPasswordRequest.resetCode);
        writer.writeAdditionalData(resetPasswordRequest.additionalData);
    }
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeTwoFactorRequest(writer: SerializationWriter, twoFactorRequest: Partial<TwoFactorRequest> | undefined | null = {}) : void {
    if (twoFactorRequest) {
        writer.writeBooleanValue("enable", twoFactorRequest.enable);
        writer.writeBooleanValue("forgetMachine", twoFactorRequest.forgetMachine);
        writer.writeBooleanValue("resetRecoveryCodes", twoFactorRequest.resetRecoveryCodes);
        writer.writeBooleanValue("resetSharedKey", twoFactorRequest.resetSharedKey);
        writer.writeStringValue("twoFactorCode", twoFactorRequest.twoFactorCode);
        writer.writeAdditionalData(twoFactorRequest.additionalData);
    }
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeTwoFactorResponse(writer: SerializationWriter, twoFactorResponse: Partial<TwoFactorResponse> | undefined | null = {}) : void {
    if (twoFactorResponse) {
        writer.writeBooleanValue("isMachineRemembered", twoFactorResponse.isMachineRemembered);
        writer.writeBooleanValue("isTwoFactorEnabled", twoFactorResponse.isTwoFactorEnabled);
        writer.writeCollectionOfPrimitiveValues<string>("recoveryCodes", twoFactorResponse.recoveryCodes);
        writer.writeNumberValue("recoveryCodesLeft", twoFactorResponse.recoveryCodesLeft);
        writer.writeStringValue("sharedKey", twoFactorResponse.sharedKey);
        writer.writeAdditionalData(twoFactorResponse.additionalData);
    }
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeUserDto(writer: SerializationWriter, userDto: Partial<UserDto> | undefined | null = {}) : void {
    if (userDto) {
        writer.writeStringValue("bio", userDto.bio);
        writer.writeStringValue("userId", userDto.userId);
        writer.writeStringValue("userName", userDto.userName);
        writer.writeAdditionalData(userDto.additionalData);
    }
}
export interface TwoFactorRequest extends AdditionalDataHolder, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * The enable property
     */
    enable?: boolean | null;
    /**
     * The forgetMachine property
     */
    forgetMachine?: boolean | null;
    /**
     * The resetRecoveryCodes property
     */
    resetRecoveryCodes?: boolean | null;
    /**
     * The resetSharedKey property
     */
    resetSharedKey?: boolean | null;
    /**
     * The twoFactorCode property
     */
    twoFactorCode?: string | null;
}
export interface TwoFactorResponse extends AdditionalDataHolder, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * The isMachineRemembered property
     */
    isMachineRemembered?: boolean | null;
    /**
     * The isTwoFactorEnabled property
     */
    isTwoFactorEnabled?: boolean | null;
    /**
     * The recoveryCodes property
     */
    recoveryCodes?: string[] | null;
    /**
     * The recoveryCodesLeft property
     */
    recoveryCodesLeft?: number | null;
    /**
     * The sharedKey property
     */
    sharedKey?: string | null;
}
export interface UserDto extends AdditionalDataHolder, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * The bio property
     */
    bio?: string | null;
    /**
     * The userId property
     */
    userId?: string | null;
    /**
     * The userName property
     */
    userName?: string | null;
}
/* tslint:enable */
/* eslint-enable */
